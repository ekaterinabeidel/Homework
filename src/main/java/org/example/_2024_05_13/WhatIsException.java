package org.example._2024_05_13;

public class WhatIsException {
    /*
     * Исключение – событие,
     * которое возникает во время выполнения программы и нарушает нормальный поток её выполнения.
     * Исключения могут возникать из-за различных причин,
     * таких как ошибки ввода-вывода, деление на ноль, доступ к недопустимой памяти и так далее.
     *
     * Исключение – объект определенного класса.
     * Когда происходит исключительная ситуация во время выполнения программы,
     * Java создает объект исключения, который содержит информацию о произошедшем событии,
     * такую как тип исключения, сообщение об ошибке, стек вызовов и т. д.
     * */

    /*
    try {
        // Код, который может вызвать исключение
    } catch (ExceptionType1 e1) {
        // Обработка исключения типа ExceptionType1
    } catch (ExceptionType2 e2) {
        // Обработка исключения типа ExceptionType2
    } finally {
        // Блок finally (необязательный)
        // Выполняется в любом случае, даже если исключение не возникло
    }
     */

}

class ClassThrowable {
    //public class Throwable implements Serializable
    /* Throwable является базовым классом для всех исключений и ошибок в Java.
     * Он представляет собой корневой класс иерархии исключений и содержит основные методы и свойства, общие для всех исключений.
     *
     * Методы:
     * getMessage(): Возвращает текстовое описание исключения.
     * getLocalizedMessage(): Возвращает локализованное текстовое описание исключения.
     * getCause(): Возвращает причину исключения или null, если причина не определена.
     * initCause(Throwable cause): Инициализирует причину исключения.
     * toString(): Возвращает строковое представление исключения, включая его тип и сообщение.
     * printStackTrace(): Выводит стек вызовов, который привел к возникновению исключения, в стандартный поток вывода.
     * printStackTrace(PrintStream s): Выводит стек вызовов в указанный поток вывода.
     * printStackTrace(PrintWriter s): Выводит стек вызовов в указанный поток вывода с помощью PrintWriter.
     * fillInStackTrace(): Инициализирует стек вызовов для исключения.
     * getStackTrace(): Возвращает массив элементов стека вызовов.
     * setStackTrace(StackTraceElement[] stackTrace): Устанавливает стек вызовов для исключения.
     * addSuppressed(Throwable exception): Добавляет подавленное исключение к этому исключению.
     * getSuppressed(): Возвращает массив подавленных исключений для этого исключения.
     * hashCode(): Возвращает хеш-код объекта.
     * equals(Object obj): Сравнивает объекты на равенство.
     * wait(), notify(), notifyAll(): Методы, связанные с многопоточностью, унаследованные от класса Object.
     * getMessage(), getCause(), initCause(Throwable cause), getStackTrace(), toString(): Все эти методы также переопределены в подклассах исключений для предоставления конкретной реализации.
     *
     * Конструкторы:
     * Throwable(): Создает новый объект Throwable без дополнительной информации.
     * Throwable(String message): Создает новый объект Throwable с указанным сообщением об ошибке.
     * Throwable(String message, Throwable cause): Создает новый объект Throwable с указанным сообщением и причиной исключения.
     * Throwable(Throwable cause): Создает новый объект Throwable с указанной причиной исключения, но без сообщения об ошибке.
     *
     * Иерархия Throwable
    |
    +-- Error ошибки, обычно возникающие вне контроля программы, такие как ошибки виртуальной машины или ошибки системы.
    |    |
    |    +-- VirtualMachineError
    |    |    |
    |    |    +-- OutOfMemoryError
    |    |    +-- StackOverflowError
    |    |    +-- ...
    |    |
    |    +-- AssertionError
    |    +-- ...
    |
    +-- Exception представляет исключения, которые программа может встретить и должна иметь возможность обработать.
         |
         +-- RuntimeException подкласс Exception, представляет исключения, которые могут возникать во время выполнения программы и часто указывают на ошибки в логике программы.
         |    |
         |    +-- NullPointerException
         |    +-- IndexOutOfBoundsException
         |    |    |
         |    |    +-- ArrayIndexOutOfBoundsException
         |    |    +-- StringIndexOutOfBoundsException
         |    +-- ArithmeticException
         |    +-- IllegalArgumentException
         |    |    |
         |    |    +-- NumberFormatException
         |    +-- ConcurrentModificationException
         |    +-- UnsupportedOperationException
         |    +-- ClassCastException
         |    +-- ...
         |
         +-- IOException специфический тип исключений, связанный с вводом-выводом.
         |    |
         |    +-- FileNotFoundException
         |    +-- EOFException
         |    +-- SocketException
         |    +-- ...
         |
         +-- SQLException специфический тип исключений, связанный с вводом-выводом или работой с базами данных.
         +-- ParseException
         +-- ...
    */


}

class ClassError {
    //public class Error extends Throwable
    /*Error – подкласс класса Throwable.
     * Он представляет серьезные проблемы, к. обычно возникают во время выполнения приложения
     * и к. могут быть вызваны внешними факторами, такими как недостаток системных ресурсов или непредвиденные ошибки виртуальной машины Java.
     * Error является обычно неотслеживаемым (unchecked) типом исключения, что означает,
     * что его не требуется обрабатывать явно в коде программы.
     * При возникновении ошибки типа Error программа часто не может нормально восстановиться, и обычно её выполнение будет прервано.
     *
     * Методы и конструкторы унаследованы от Throwable.
     */
}

class ClassException {
    //public class Exception extends Throwable
    /* Exception – базовый класс для всех проверяемых исключений.
     *  Исключения класса Exception могут возникать во время выполнения программы
     * и должны быть обработаны или объявлены в сигнатуре метода с помощью конструкции throws.
     * Методы и конструкторы унаследованы от Throwable.
     */
}

class CheckedException {
    /*
     * Проверяемое исключение (checked exception) – это тип исключения,
     * который компилятор Java требует обрабатывать или объявлять в сигнатуре метода с помощью конструкции throws.
     * Они являются подклассами класса Exception, за исключением подклассов RuntimeException и его подклассов.
     * Обработка таких исключений позволяет программе корректно реагировать на ситуации,
     * когда не удается выполнить операцию, и предотвращает непредсказуемое поведение приложения.
     *
     * Некоторые из основных классов проверяемых исключений в Java:
     * IOException: Основной класс исключений, связанных с вводом-выводом.
     * Включает в себя множество подклассов, таких как FileNotFoundException, EOFException, SocketException и другие.
     * SQLException: Исключение, связанное с ошибками при работе с базами данных.
     * ClassNotFoundException: Выбрасывается, когда программа пытается загрузить класс во время выполнения, но соответствующий класс не может быть найден.
     * ParseException: Выбрасывается, когда возникают проблемы с разбором строки, например, при разборе даты.
     * InterruptedException: Выбрасывается, когда поток исполнения прерывается извне.
     * NoSuchMethodException: Выбрасывается, когда метод, указанный по имени, не может быть найден.
     * IllegalAccessException: Выбрасывается, когда доступ к классу, методу или полю является недопустимым.
     * InstantiationException: Выбрасывается, когда попытка создать экземпляр класса не удалась, например, если класс является абстрактным или интерфейсным.
     * RuntimeException (важно помнить, что, хотя RuntimeException является подклассом Exception,
     * он является непроверяемым исключением, но поскольку он находится в иерархии Exception,
     * его также можно рассматривать как проверяемое).
     *
     */
}

class ClassRuntimeException {
    //public class RuntimeException extends Exception
    /* Класс RuntimeException  назван так из-за своего типа исключений,
     * которые обычно возникает во время выполнения программы, а не на этапе компиляции.
     * Это исключения, которые, как правило, свидетельствуют о нарушении условий выполнения кода во время его выполнения,
     * таких как попытка доступа к null ссылке, деление на ноль или обращение к элементу массива с неправильным индексом.
     * Названные так из-за своего характера, исключения типа RuntimeException обычно не требуют явной обработки в коде
     * с помощью конструкции try-catch или объявления в сигнатуре метода с помощью конструкции throws.
     * Это объясняет, почему их называют "исключениями времени выполнения" или "runtime exceptions".
     */

}

class UncheckedException {
    /* Все подклассы класса RuntimeException являются непроверяемыми исключениями (unchecked exceptions).
     * Cписок некоторых из них:
     * ArithmeticException: Вызывается при выполнении недопустимой арифметической операции, такой как деление на ноль.
     * ArrayIndexOutOfBoundsException: Вызывается при попытке доступа к элементу массива по недопустимому индексу.
     * ClassCastException: Вызывается при неправильном приведении типов объектов.
     * IllegalArgumentException: Вызывается при передаче недопустимых аргументов в метод.
     * IllegalStateException: Вызывается при обнаружении недопустимого состояния объекта или приложения.
     * NullPointerException: Вызывается при попытке обращения к объекту через ссылку, равную null.
     * NumberFormatException: Вызывается при попытке преобразования строки в числовой формат, когда строка имеет неправильный формат.
     * UnsupportedOperationException: Вызывается при попытке выполнить операцию, которая не поддерживается.
     * IndexOutOfBoundsException: Вызывается при попытке доступа к элементу коллекции или строки по недопустимому индексу.
     * ConcurrentModificationException: Вызывается при обнаружении модификации коллекции во время итерации по ней.
     */
}

class MyException {
    /*

    // Создаем собственный класс исключения, расширяющий Exception
        public class CustomException extends Exception {

    // Конструктор, который принимает сообщение об ошибке
        public CustomException(String message) {
        // Вызываем конструктор родительского класса Exception и передаем сообщение об ошибке
            super(message);
    }
}
public class Main {
    // Метод, который может вызвать ваше собственное исключение
    public void process() throws CustomException {
        // Проверяем какое-то условие
        boolean condition = false;
        if (condition) {
            // Если условие не выполнено, выбрасываем ваше собственное исключение с сообщением
            throw new CustomException("Сообщение об ошибке");
        }
    }

    public static void main(String[] args) {
        Main main = new Main();
        try {
            // Вызываем метод process(), который может выбросить ваше собственное исключение
            main.process();
        } catch (CustomException e) {
            // Обрабатываем ваше собственное исключение
            System.out.println("Произошла ошибка: " + e.getMessage());
        }
    }
}
    */
}

